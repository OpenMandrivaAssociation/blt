--- blt2.4z/src/bltTed.c	2002-05-16 13:46:00.000000000 -0700
+++ blt2.4z/src/bltTed.c.new	2008-12-04 12:49:33.000000000 -0800
@@ -25,6 +25,8 @@
  * Table editor was created by George Howlett.
  */
 
+#define USE_INTERP_RESULT
+
 #include "bltInt.h"
 
 #include "bltTable.h"
--- blt2.4z/src/tkScrollbar.c	2002-05-16 13:46:01.000000000 -0700
+++ blt2.4z/src/tkScrollbar.c.new	2008-12-04 12:48:29.000000000 -0800
@@ -533,7 +533,7 @@
 	} else {
 	    fraction = ((double)pixels / (double)barWidth);
 	}
-	sprintf(interp->result, "%g", fraction);
+	sprintf(Tcl_GetStringResult(interp), "%g", fraction);
     } else if ((c == 'f') && (strncmp(argv[1], "fraction", length) == 0)) {
 	int x, y, pos, barWidth;
 	double fraction;
@@ -788,7 +788,7 @@
  *
  * Results:
  *	The return value is a standard Tcl result.  If TCL_ERROR is
- *	returned, then interp->result contains an error message.
+ *	returned, then Tcl_GetStringResult(interp) contains an error message.
  *
  * Side effects:
  *	Configuration information, such as colors, border width,
--- blt2.4z/src/bltVecMath.c	2002-09-09 22:12:33.000000000 -0700
+++ blt2.4z/src/bltVecMath.c.new	2008-12-04 12:48:23.000000000 -0800
@@ -745,10 +745,10 @@
  *
  *	This procedure is called when an error occurs during a
  *	floating-point operation.  It reads errno and sets
- *	interp->result accordingly.
+ *	Tcl_GetStringResult(interp) accordingly.
  *
  * Results:
- *	Interp->result is set to hold an error message.
+ *	Tcl_GetStringResult(interp) is set to hold an error message.
  *
  * Side effects:
  *	None.
@@ -764,20 +764,20 @@
     if ((errno == EDOM) || (value != value)) {
 	Tcl_AppendResult(interp, "domain error: argument not in valid range",
 	    (char *)NULL);
-	Tcl_SetErrorCode(interp, "ARITH", "DOMAIN", interp->result,
+	Tcl_SetErrorCode(interp, "ARITH", "DOMAIN", Tcl_GetStringResult(interp),
 	    (char *)NULL);
     } else if ((errno == ERANGE) || IS_INF(value)) {
 	if (value == 0.0) {
 	    Tcl_AppendResult(interp, 
 			     "floating-point value too small to represent",
 		(char *)NULL);
-	    Tcl_SetErrorCode(interp, "ARITH", "UNDERFLOW", interp->result,
+	    Tcl_SetErrorCode(interp, "ARITH", "UNDERFLOW", Tcl_GetStringResult(interp),
 		(char *)NULL);
 	} else {
 	    Tcl_AppendResult(interp, 
 			     "floating-point value too large to represent",
 		(char *)NULL);
-	    Tcl_SetErrorCode(interp, "ARITH", "OVERFLOW", interp->result,
+	    Tcl_SetErrorCode(interp, "ARITH", "OVERFLOW", Tcl_GetStringResult(interp),
 		(char *)NULL);
 	}
     } else {
@@ -786,7 +786,7 @@
 	sprintf(buf, "%d", errno);
 	Tcl_AppendResult(interp, "unknown floating-point error, ",
 	    "errno = ", buf, (char *)NULL);
-	Tcl_SetErrorCode(interp, "ARITH", "UNKNOWN", interp->result,
+	Tcl_SetErrorCode(interp, "ARITH", "UNKNOWN", Tcl_GetStringResult(interp),
 	    (char *)NULL);
     }
 }
@@ -880,7 +880,7 @@
  *	was computed successfully.  If the name doesn't match any
  *	known math function, returns TCL_RETURN. And if a format error
  *	was found, TCL_ERROR is returned and an error message is left
- *	in interp->result.
+ *	in Tcl_GetStringResult(interp).
  *
  *	After a successful return parsePtr will be updated to point to
  *	the character just after the function call, the token is set
@@ -963,7 +963,7 @@
  * Results:
  *	TCL_OK is returned unless an error occurred while doing lexical
  *	analysis or executing an embedded command.  In that case a
- *	standard Tcl error is returned, using interp->result to hold
+ *	standard Tcl error is returned, using Tcl_GetStringResult(interp) to hold
  *	an error message.  In the event of a successful return, the token
  *	and field in parsePtr is updated to refer to the next symbol in
  *	the expression string, and the expr field is advanced past that
@@ -1211,7 +1211,7 @@
  *
  * Results:
  *	Normally TCL_OK is returned.  The value of the expression is
- *	returned in *valuePtr.  If an error occurred, then interp->result
+ *	returned in *valuePtr.  If an error occurred, then Tcl_GetStringResult(interp)
  *	contains an error message and TCL_ERROR is returned.
  *	InfoPtr->token will be left pointing to the token AFTER the
  *	expression, and parsePtr->nextPtr will point to the character just
@@ -1756,7 +1756,7 @@
  *
  * Results:
  *	The result is a standard Tcl return value.  If an error
- *	occurs then an error message is left in interp->result.
+ *	occurs then an error message is left in Tcl_GetStringResult(interp).
  *	The value of the expression is returned in *valuePtr, in
  *	whatever form it ends up in (could be string or integer
  *	or double).  Caller may need to convert result.  Caller
@@ -1822,7 +1822,7 @@
  * Results:
  *	Each procedure returns TCL_OK if it succeeds and places result
  *	information at *resultPtr.  If it fails it returns TCL_ERROR
- *	and leaves an error message in interp->result.
+ *	and leaves an error message in Tcl_GetStringResult(interp).
  *
  * Side effects:
  *	None.
@@ -2010,7 +2010,7 @@
  * Results:
  *	Each of the procedures below returns a standard Tcl result.
  *	If an error occurs then an error message is left in
- *	interp->result.  Otherwise the value of the expression,
+ *	Tcl_GetStringResult(interp).  Otherwise the value of the expression,
  *	in the appropriate form, is stored at *resultPtr.  If
  *	the expression had a result that was incompatible with the
  *	desired form then an error is returned.
@@ -2042,7 +2042,7 @@
 	Blt_VectorDuplicate(vPtr, value.vPtr);
     } else {
 	register int i;
-	/* No result vector.  Put values in interp->result.  */
+	/* No result vector.  Put values in Tcl_GetStringResult(interp).  */
 	for (i = 0; i < value.vPtr->length; i++) {
 	    string = Blt_Dtoa(interp, value.vPtr->valueArr[i]);
 	    Tcl_AppendElement(interp, string);
--- blt2.4z/src/bltScrollbar.c	2002-07-17 15:38:54.000000000 -0700
+++ blt2.4z/src/bltScrollbar.c.new	2008-12-04 12:54:01.000000000 -0800
@@ -534,7 +534,7 @@
 	} else {
 	    fraction = ((double)pixels / (double)barWidth);
 	}
-	sprintf(interp->result, "%g", fraction);
+	sprintf(Tcl_GetStringResult(interp), "%g", fraction);
     } else if ((c == 'f') && (strncmp(argv[1], "fraction", length) == 0)) {
 	int x, y, pos, barWidth;
 	double fraction;
@@ -789,7 +789,7 @@
  *
  * Results:
  *	The return value is a standard Tcl result.  If TCL_ERROR is
- *	returned, then interp->result contains an error message.
+ *	returned, then Tcl_GetStringResult(interp) contains an error message.
  *
  * Side effects:
  *	Configuration information, such as colors, border width,
